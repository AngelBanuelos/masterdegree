/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package masterdegree.mac.session7;

import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import masterdegree.ada.search.HashSearch;
import masterdegree.ada.tree.HuffmanNode;
import masterdegree.ada.tree.HuffmanTree;
import masterdegree.ada.tree.graphic.GraphicTreeBuilder;
import masterdegree.mac.session7.HuffmanConstants;

/**
 * Implementacion de las clases realizada, para mostrar de manera grafica la codificacion y decodificacion de Huffman
 * @author angel_banuelos
 */
public class HuffmanUI extends javax.swing.JFrame {

    /**
     * Creates new form HuffmanUI
     */
    private String defaultHuffmanTreeName;
    private HuffmanTree currentTree;
    private String graphicTreeBuilderDirectory;

    public HuffmanUI() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        lblPath = new javax.swing.JLabel();
        btnOpen = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        btnStart = new javax.swing.JButton();
        pgbRunnig = new javax.swing.JProgressBar();
        lblTreeFail = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblElapsedTime = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        mnuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuOpen = new javax.swing.JMenuItem();
        mnuTrees = new javax.swing.JMenu();
        mnuNewTreeFail = new javax.swing.JMenuItem();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(lblPath, gridBagConstraints);

        btnOpen.setText("Decode Huffman");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnOpen, gridBagConstraints);

        txtResult.setColumns(20);
        txtResult.setRows(5);
        jScrollPane1.setViewportView(txtResult);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        btnStart.setText("Code");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnStart, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(pgbRunnig, gridBagConstraints);

        lblTreeFail.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(lblTreeFail, gridBagConstraints);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(lblStatus, gridBagConstraints);

        lblElapsedTime.setText("Elapsed Time:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(lblElapsedTime, gridBagConstraints);

        btnSave.setText("Clear");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(btnSave, gridBagConstraints);

        mnuFile.setText("File");

        mnuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuOpen.setText("Code Huffman");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mnuOpen);

        mnuTrees.setText("Load Saved Tree");
        mnuTrees.setActionCommand("Load Tree");

        mnuNewTreeFail.setText("Create Huffman Tree");
        mnuNewTreeFail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewTreeFailActionPerformed(evt);
            }
        });
        mnuTrees.add(mnuNewTreeFail);

        mnuFile.add(mnuTrees);

        mnuBar.add(mnuFile);

        setJMenuBar(mnuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        // TODO add your handling code here:
        lblPath.setText(getDestinationDir());
        if (lblPath.getText() != null && !lblPath.getText().isEmpty()) {
            decodeFiles(lblPath.getText());
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        // TODO add your handling code here:
        lblPath.setText(getDestinationDir());
        if (!lblPath.getText().isEmpty()) {
            new Thread(new Runnable() {

                @Override
                public void run() {
                    codeFiles(lblPath.getText());
                }
            }).run();

        }
    }//GEN-LAST:event_mnuOpenActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        lblPath.setText(getDestinationDir());
        if (lblPath.getText() != null && !lblPath.getText().isEmpty()) {
            new Thread(new Runnable() {

                @Override
                public void run() {
                    codeFiles(lblPath.getText());
                }
            }).run();

        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void mnuNewTreeFailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewTreeFailActionPerformed
        // TODO add your handling code here:
        newHuffmanTree();
    }//GEN-LAST:event_mnuNewTreeFailActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        saveDecode();
    }//GEN-LAST:event_btnSaveActionPerformed

    private String getDestinationDir() {

        Window windowChooser = new Window(this, true, Window.Type.OPENFOLDER);
        try {
            windowChooser.setVisible(true);
            return windowChooser.getStrDirectory();
        } finally {
            windowChooser.dispose();
        }
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblElapsedTime;
    private javax.swing.JLabel lblPath;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTreeFail;
    private javax.swing.JMenuBar mnuBar;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuNewTreeFail;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenu mnuTrees;
    private javax.swing.JProgressBar pgbRunnig;
    private javax.swing.JTextArea txtResult;
    // End of variables declaration//GEN-END:variables

    private void openHuffmanTree(String treeFailName) {
        GraphicTreeBuilder tree = new GraphicTreeBuilder(treeFailName, HuffmanConstants.HUFFMANTREEEXTENSION);
        tree.createTree(currentTree);
        tree.setVisible(true);
    }

    private void btnStart() {

    }

    private ArrayList<File> getFiles(String folderDirectory, String extension) {
        ArrayList<File> files = new ArrayList<File>();
        File fi = new File(folderDirectory);
        File[] listaObjetos = fi.listFiles();
        for (int i = 0; i < listaObjetos.length; i++) {
            if (accept(listaObjetos[i], extension)) {
                System.out.println("Se encontro archivos " + extension + " : "
                        + listaObjetos[i].getPath());
                files.add(listaObjetos[i]);
            }
        }
        return files;
    }

    private void showMessage(String title, String message) {
        JOptionPane.showMessageDialog(this, message, title, 1);
    }//206.32

    public boolean accept(File dir, String extension) {
        boolean ok = false;
        if (dir.getName().endsWith(extension)) {
            ok = true;
        }
        return ok;
    }

    private String openFile(File file) throws FileNotFoundException, IOException {
        StringBuilder message = new StringBuilder();
        BufferedReader br = new BufferedReader(new FileReader(file));
        String line = "";
        while ((line = br.readLine()) != null) {
            message.append(line);
        }
        br.close();
        return message.toString();
    }

    private void newHuffmanTree() {
        String newAlphabet = JOptionPane.showInputDialog(this, "Insert the alphabet",
                "New Huffman Tree ", 1);
        if (newAlphabet != null) {
            this.lblTreeFail.setText(newAlphabet);
            currentTree = new HuffmanTree(newAlphabet);
            openHuffmanTree(newAlphabet);
        } else {
        }
    }

    private void init() {
        this.setTitle("Huffman Decoder and Coder");
        this.setSize(754, 526);
        this.btnSave.setEnabled(true);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        File dir = new File(GraphicTreeBuilder.DEFAULTDIRECTORY);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        String[] files = dir.list();
        ArrayList<String> huffmanTreeList = new ArrayList<String>();
        for (String file : files) {
            if (file.endsWith(HuffmanConstants.HUFFMANTREEEXTENSION)) {
                huffmanTreeList.add(file);
            }
        }
        if (!huffmanTreeList.isEmpty()) {
            javax.swing.JMenuItem[] mnuItemsTreeFails = new JMenuItem[huffmanTreeList.size()];
            for (int i = 0; i < huffmanTreeList.size(); i++) {
                if (new File(dir.getAbsolutePath() + File.separator + huffmanTreeList.get(i)).isFile()) {
                    mnuItemsTreeFails[i] = new javax.swing.JMenuItem();
                    mnuItemsTreeFails[i].setText(huffmanTreeList.get(i));
                    mnuItemsTreeFails[i].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            mnuItemTreeFailActionPerformed(evt);
                        }
                    });
                    mnuTrees.add(mnuItemsTreeFails[i]);
                }
            }
        } else {
            newHuffmanTree();
        }
    }

    private void mnuItemTreeFailActionPerformed(ActionEvent evt) {
        openHuffmanTreeFromFile(evt.getActionCommand());
        lblTreeFail.setText(evt.getActionCommand());
    }

    private void saveCode() {

    }

    private void saveDecode() {
        txtResult.setText("");
    }

    private void codeFiles(String directory) {
        ArrayList<File> files = getFiles(directory, ".txt");
        if (files != null && !files.isEmpty()) {
            for (File file : files) {
                try {
                    txtResult.append("__________________" + file.getName() + "____________________\n");
                    String text
                            = openFile(file);
                    HuffmanCode code = new HuffmanCode(currentTree);
                    txtResult.append(code.code(text));
                    code.saveCodeToFile(HuffmanConstants.SAVEDIRECTORY, file.getName());
                    txtResult.append("\n\tSaved in " + HuffmanConstants.SAVEDIRECTORY);
                    txtResult.append("\n________________________________________________________________________\n");
                } catch (IOException ex) {
                    Logger.getLogger(HuffmanUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    txtResult.append("\n" + ex.getMessage() + "\n");
                }
            }
        }

    }

    private void decodeFiles(String directory) {
        ArrayList<File> files = getFiles(directory, HuffmanConstants.HUFFMANCODEEXTENTION);
        if (files != null && !files.isEmpty()) {
            for (File file : files) {
                try {
                    txtResult.append("__________________" + file.getName() + "____________________\n");
                    String text
                            = openFile(file);
                    HuffmanDecode decode = new HuffmanDecode(currentTree);
                    txtResult.append(decode.decode(text));
                    decode.saveDecodeToFile(file.getName());
                    txtResult.append("\n\tSaved in " + HuffmanConstants.SAVEDIRECTORY);
                    txtResult.append("\n________________________________________________________________________\n");
                } catch (IOException ex) {
                    Logger.getLogger(HuffmanUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    txtResult.append("\n" + ex.getMessage() + "\n");
                }
            }
        }
    }

    private void openHuffmanTreeFromFile(String actionCommand) {
        GraphicTreeBuilder tree = new GraphicTreeBuilder(actionCommand, HuffmanConstants.HUFFMANTREEEXTENSION);
        tree.readTreeFromFile(actionCommand);
        tree.setVisible(true);
        this.lblTreeFail.setText(actionCommand);
        currentTree = new HuffmanTree();
        currentTree.setRoot((HuffmanNode) tree.getRoot().getUserObject());
    }
}
